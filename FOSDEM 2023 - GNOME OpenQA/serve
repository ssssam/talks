#!/usr/bin/env python3

"""Sam's reveal.js wrapper tool, version 100."""

from argparse import ArgumentParser, FileType
from io import BytesIO
from pathlib import Path
from zipfile import ZipFile
import logging
import os
import sys

import requests


log = logging.getLogger()


REVEAL_JS_VERSION = '4.4.0'
REVEAL_JS_URL = f"https://github.com/hakimel/reveal.js/archive/refs/tags/{REVEAL_JS_VERSION}.zip"


def argument_parser():
    parser = ArgumentParser(description="reveal.js wrapper tool")
    parser.add_argument('--debug', dest='debug', action='store_true',
                        help="Enable detailed logging to stderr")
    parser.add_argument('infile', type=FileType('r'), nargs="?", default="presentation.md")
    parser.add_argument('outdir', type=Path, nargs="?", default="./output")
    return parser


def ensure_outdir(outdir):
    outdir.mkdir(exist_ok=True, parents=True)
    return outdir


def unzip(stream: BytesIO, outdir: Path, strip_components: int=0):
    with ZipFile(stream) as zipfile:
        for zip_info in zipfile.infolist():
            path_in_zip = Path(zip_info.filename)
            if len(path_in_zip.parts) <= strip_components:
                log.debug(f"Ignore {path_in_zip}")
            else:
                extracted_path = Path('')
                extracted_path = extracted_path.joinpath(*path_in_zip.parts[strip_components:])
                log.debug(f"Made {extracted_path} from {path_in_zip.parts[strip_components:]}")

                # FIXME check its safe, the path might be malicious...
                log.debug(f"Extract {path_in_zip} as {extracted_path}")
                if zip_info.is_dir():
                    outdir.joinpath(extracted_path).mkdir()
                else:
                    zip_info.filename = str(extracted_path)
                    zipfile.extract(zip_info, outdir)


def download_and_unpack_reveal_js(outdir: Path):
#    with NamedTemporaryDirectory() as t:
#        requests.get(REVEAL_JS_VERSION)
#        output_path = Path(t).joinpath("reveal.js.zip")
#        with open(output_path, "wb") as f:
#            f.write(response.content)
    log.info(f"Fetch and extract ${REVEAL_JS_URL}")
    response = requests.get(REVEAL_JS_URL);
    stream = BytesIO(response.content)
    unzip(stream, outdir, strip_components=1)


def main():
    args = argument_parser().parse_args()

    if args.debug:
        logging.basicConfig(stream=sys.stderr, level=logging.DEBUG)

    outdir = ensure_outdir(args.outdir)
    if not outdir.joinpath('js/reveal.js').exists():
        download_and_unpack_reveal_js(outdir)



try:
    main()
except RuntimeError as e:
    sys.stderr.write("ERROR: {}\n".format(e))
    sys.exit(1)
