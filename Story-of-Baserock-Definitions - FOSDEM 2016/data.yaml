---

- name: "[Apache Ant](https://ant.apache.org/) + [Apache Ivy](https://ant.apache.org/ivy/)"
  syntax: XML
  schemas:
    - "Ant: no"
    - "Ivy: https://ant.apache.org/ivy/schemas/ivy.xsd"
  data-model: "?"
  declarative: yes (Ivy)
  procedural: yes (Ant)
  documentation:
    - https://ant.apache.org/manual/index.html
    - https://ant.apache.org/ivy/history/latest-milestone/reference.html
  users: Widespread use in Java community
  full-distro: no
  notes:
    Since Ant and Ivy can run arbitrary tasks and manage the dependencies
    between multiple artifacts, you could build a whole distro that way.
    You would probably want to autogenerate the XML from a more sane format.
  artifact-caching:
    "[Maven repo](https://maven.apache.org/guides/introduction/introduction-to-repositories.html)": manual version numbers
  incremental-builds: \?
  data-in-one-place: no
  build-tools: Ant

- name: "[Baserock definitions](http://wiki.baserock.org/definitions/current/)"
  images:
    - topics/images/comparison/baserock-definitions-cpython3.png
  syntax: YAML
  schemas: http://git.baserock.org/cgi-bin/cgit.cgi/baserock/baserock/definitions.git/tree/schemas
  data-model: http://git.baserock.org/cgi-bin/cgit.cgi/baserock/baserock/definitions.git/tree/schemas/baserock.owl
  declarative: yes
  documentation: http://wiki.baserock.org/definitions/current/
  users: Baserock reference systems, ...
  examples:
    cpython: "[strata/core/cpython.morph](http://git.baserock.org/cgi-bin/cgit.cgi/baserock/baserock/definitions.git/tree/strata/core/python3.morph)"
  machine-readable: Trivially
  full-distro:
    - "[Baserock reference systems](http://git.baserock.org/cgi-bin/cgit.cgi/baserock/baserock/definitions.git/tree/)"
  branch-whole-system: yes
  artifact-caching:
    "[Baserock artifact cache](http://wiki.baserock.org/caching/)": hash of inputs
  import-from: [CPAN, NPM, PyPI, RubyGems]
  export-to: Shell (cross-bootstrap)
  cross-compile: no
  build-tools:
    - "[Morph](http://wiki.baserock.org/Morph/)"
    - "[YBD](http://wiki.baserock.org/ybd/)"
  browse-tools:
    - cgit frontend in [Trove](http://wiki.baserock.org/Trove/) Git server
  edit-tools:
    - "[Morph](http://wiki.baserock.org/Morph/)"
  incremental-builds: not easily
  reproducible-builds: functionally reproducible
  data-in-one-place: yes   # http://git.baserock.org/cgi-bin/cgit.cgi/baserock/baserock/definitions.git/tree/
  versioned: yes, with automatic migrations

- name: "[BitBake](https://www.yoctoproject.org/docs/1.6/bitbake-user-manual/bitbake-user-manual.html) recipes"
  images:
      - topics/images/comparison/bitbake-poky-cpython3-python.inc.png
      - topics/images/comparison/bitbake-poky-cpython3-top.png
  syntax: "[BitBake](https://www.yoctoproject.org/docs/1.6/bitbake-user-manual/bitbake-user-manual.html#bitbake-user-manual-metadata)"
  users: OpenEmbedded, Yocto, many commercial & some public derivatives, ...
  procedural: yes
  examples:
    cpython: "[meta/recipes-devtools/python/python3_3.4.3.bb](https://git.yoctoproject.org/cgit/cgit.cgi/poky/tree/meta/recipes-devtools/python/python3_3.5.0.bb)"
  machine-readable: |
    Lots of work! Need to stub out the base classes.
    I tried: <http://lists.openembedded.org/pipermail/bitbake-devel/2015-August/006297.html>
  full-distro:
    - "[OpenEmbedded-Core](http://www.openembedded.org/wiki/OpenEmbedded-Core)"
    - "Yocto [Poky](https://www.yoctoproject.org/tools-resources/projects/poky)"
  branch-whole-system: yes (multiple layers though)
  data-in-one-place: no
  artifact-caching:
    "[Setscene](https://www.yoctoproject.org/docs/1.6/bitbake-user-manual/bitbake-user-manual.html#setscene)": Hash of build inputs
  cross-compile: yes
  incremental-builds: yes
  reproducible-builds: no
  versioned: no (build tool lives alongside recipes)
  build-tools: BitBake

- name: "[BOSH](https://bosh.io/)"
  syntax: YAML
  schemas: "?"
  data-model: "?"
  declarative: yes
  documentation: https://bosh.io/docs/deployment-manifest.html
  users: CloudFoundry, ...
  full-distro: no
  notes:
    BOSH is a very strange tool that could fit in any of the categories of
    build tool, config management tool or monitoring tool. It works by taking
    a base OS image ('stem cell') then compiling packages on top ('releases')
    from source, and then sets up configuration for them and manages instances
    within a cloud provider as well.
  artifact-caching: "?"
  build-tools: BOSH

- name: "[Bazel](https://bosh.io/)"
  syntax: Bazel BUILD language (Python-like)
  schemas: "?"
  data-model: "?"
  procedural: yes
  documentation:
    - http://bazel.io/docs/build-ref.html
  users: Google, ...
  full-distro: no
  notes:
    Bazel is a build tool for applications, but it has handling for [external
    modules](http://bazel.io/docs/external.html) that can manage external
    dependencies.

    It requires knowledge of exactly which files depend on other files in
    order to do reproducible builds, i.e. it can't "magically" work out the
    dependencies from an existing Makefile.
  artifact-caching: "?"
  incremental-builds: yes
  reproducible-builds: yes
  data-in-one-place: no
  versioned: no
  build-tools: Bazel

- name: "[Buildroot](http://buildroot.uclibc.org/)"
  images:
    - topics/images/comparison/buildroot-cpython3-top.png
  syntax: Make
  users: Buildroot, OpenWRT, widespread commercial use, ...
  documentation: http://buildroot.uclibc.org/downloads/manual/manual.html#adding-packages
  procedural: yes
  examples:
    cpython: "[package/python3/python3.mk](http://git.buildroot.net/buildroot/tree/package/python3/python3.mk), [package/python3/Config.in](http://git.buildroot.net/buildroot/tree/package/python3/Config.in)"
  full-distro: yes
  branch-whole-system: yes
  artifact-caching: no
  cross-compile: yes
  incremental-builds: yes
  data-in-one-place: yes

- name: "[Cerbero](http://cgit.freedesktop.org/gstreamer/cerbero/)"
  syntax: Python
  users: GStreamer SDK
  schemas: no
  documentation:
    - http://docs.gstreamer.com/display/GstSDK/Multiplatform+deployment+using+Cerbero
  procedural: yes
  examples:
    cpython: http://cgit.freedesktop.org/gstreamer/cerbero/tree/packages/python3.package
  data-model: not specified
  full-distro: no
  artifact-caching: no
  cross-compile: yes
  data-in-one-place: yes
  versioned: no
  build-tools: Cerbero

- name: "[CMake](http://cmake.org/) [ExternalProject](https://cmake.org/cmake/help/v3.3/module/ExternalProject.html) / [CPM](https://github.com/iauns/cpm) / [Hunter](https://github.com/ruslo/hunter) / [biicode](http://biicode.com/)"
  syntax: CMake
  users: ...
  schemas: "?"
  procedural: yes
  data-model: not specified
  full-distro: no
  notes:
    CMake is a build tool for applications, but it has several extensions to
    deal with building external source code.
  artifact-caching: no
  cross-compile: yes
  data-in-one-place: yes
  versioned: core only (with very strong backwards-compatibility)
  build-tools: CMake

- name: "[Conary](https://github.com/sassoftware/conary)"
  syntax: Python
  procedural: yes
  users: Foresight Linux (discontinued)
  full-distro: yes
  branch-whole-system: \?
  artifact-caching:
    Conary packages: manual version numbers
  machine-readable: no

- name: "[Debian](http://debian.org/)"
  images:
    - topics/images/comparison/debian-cpython3-control.png
    - topics/images/comparison/debian-cpython3-rules-top.png
  syntax:
    - Key-value (control, copyright, changelog)
    - Make (rules)
  declarative: yes (control)
  procedural: yes (rules)
  schemas:
    control: https://www.debian.org/doc/debian-policy/ch-controlfields.html
    rules: https://www.debian.org/doc/debian-policy/ch-source.html#s-debianrules
  data-model: https://www.debian.org/doc/debian-policy/ch-controlfields.html
  documentation: https://www.debian.org/doc/manuals/developers-reference/ch06.en.html
  users: Debian, Linux Mint, Ubuntu, many other public and proprietiary Debian derivates
  examples:
    cpython: "[debian/rules](https://alioth.debian.org/scm/loggerhead/pkg-python/python3-defaults-debian/view/head:/debian/rules), [debian/control](https://alioth.debian.org/scm/loggerhead/pkg-python/python3-defaults-debian/view/head:/debian/control) ([pkg-python project main page](https://alioth.debian.org/projects/pkg-python)"
  machine-readable: maybe
  full-distro: yes
  branch-whole-system: no (dgit helps)
  artifact-caching:
    "[deb packages](https://www.debian.org/doc/manuals/debian-faq/ch-pkg_basics)": manual version numbers
  cross-compile: partial
  build-tools:
    - "[dpkg-buildpackage, debuild, pbuilder, pdebuild](https://www.debian.org/doc/manuals/maint-guide/build.en.html#hierarchy)"
    - "[git-buildpackage](https://honk.sigxcpu.org/piki/projects/git-buildpackage/)"
    - svn-buildpackage, cvs-buildpackage
    - apt-build
  browse-tools:
    "[debsources](https://anonscm.debian.org/cgit/qa/debsources.git/)": |
      Web frontend to browse contents of Debian source packages. Deployed at
      <https://sources.debian.net/>.
    "[dgit](https://lwn.net/Articles/651673/)": |
      Git interface across all Debian source packages.
    "[webwml/packages.git](https://anonscm.debian.org/gitweb/?p=webwml/packages.git)": |
      Web frontend to browse packages in the Debian archive and the
      dependencies between them. Deployed at
      <https://packages.debian.net/stable/>.
  edit-tools:
    "[dgit](https://lwn.net/Articles/651673/)": |
      Git interface across all Debian source packages.
  incremental-builds: yes
  data-in-one-place: no
  versioned: if you use debhelper... (no automated migrartions)

- name: "[GNOME Continuous](https://wiki.gnome.org/Projects/GnomeContinuous)"
  syntax: JSON
  declarative: yes
  users: GNOME Continous CI system
  full-distro: no
  branch-whole-system: yes
  example:
    GNOME: https://github.com/GNOME/gnome-continuous/blob/master/manifest.json
  machine-readable: yes
  artifact-caching:
    "[ostree](https://wiki.gnome.org/Projects/OSTree) repo": hash of contents
  cross-compile: no
  incremental-builds: yes
  data-in-one-place: yes   # https://github.com/GNOME/gnome-continuous/blob/master/manifest.json
  versioned: no
  build-tools: gnome-continuous

- name: "[GNOME jhbuild](https://wiki.gnome.org/Projects/Jhbuild)"
  syntax: XML
  declarative: yes
  users: GNOME project, ...
  full-distro: no
  branch-whole-system: not easy
  schemas:
    - https://git.gnome.org/browse/jhbuild/tree/modulesets/moduleset.dtd
    - https://git.gnome.org/browse/jhbuild/tree/modulesets/moduleset.rnc
  data-model: https://developer.gnome.org/jhbuild/unstable/moduleset-syntax.html.en
  machine-readable: yes
  artifact-caching: no
  cross-compile: no
  incremental-builds: yes
  data-in-one-place: yes   # https://git.gnome.org/browse/jhbuild/tree/modulesets/
  versioned: no
  build-tools: jhbuild

- name: "[GNU Guix](https://www.gnu.org/software/guix)"
  syntax: "[GUILE](https://www.gnu.org/software/guile/) (Scheme)"
  images:
    - topics/images/comparison/guix-cpython2.png
    - topics/images/comparison/guix-cpython3.png
  declarative: yes
  procedural: yes
  schemas:
    - https://www.gnu.org/software/guix/manual/html_node/package-Reference.html
    - https://www.gnu.org/software/guix/manual/html_node/Build-Systems.html
  documentation:
    - https://www.gnu.org/software/guix/manual/html_node/Invoking-guix-import.html
  users: GNU GUIX Software Distribution
  versioned: no
  full-distro: yes
  branch-whole-system: yes
  examples:
    cpython: "[gnu/packages/python.scm](http://git.savannah.gnu.org/cgit/guix.git/tree/gnu/packages/python.scm#n258) (this describes many Python add-on libraries in addition to the 'cpython' Python interpreter)"
  machine-readable: yes
  import-from: [CPAN (Perl), CRAN (R), ELPA (Emacs), GNU, Haskell, Nix, PyPI, RubyGems]
  other-features: "[config-management](https://www.gnu.org/software/guix/manual/html_node/System-Configuration.html)"
  cross-compile: no
  artifact-caching:
    "[hydra](https://nixos.org/hydra/)": hash of build inputs
  browse-tools:
    "[packages.scm](http://git.savannah.gnu.org/cgit/guix/guix-artwork.git/tree/website/www/packages.scm": |
      Web frontend to Guix package list. Deployed at
      <https://www.gnu.org/software/guix/packages/>.
  incremental-builds: no
  data-in-one-place: yes     # http://git.savannah.gnu.org/cgit/guix.git/
  versioned: no
  build-tools: GUIX

- name: "[Gradle](https://www.gradle.org/)"
  syntax: "[Gradle](https://docs.gradle.org/current/dsl/)"
  users: Widespread use in Java community, C/C++ support limited
  documentation:
    - http://gradle.org/maven_vs_gradle/
    - https://carlosvin.github.io/en/posts/gradle-cpp/
  full-distro: no
  artifact-caching:
    "[Maven repo](https://maven.apache.org/guides/introduction/introduction-to-repositories.html)": manual version numbers
  data-in-one-place: no
  build-tools: Gradle

- name: "[Maven](http://maven.apache.org/)"
  syntax: XML
  declarative: yes
  users: Widespread use in Java community, C/C++ support limited
  full-distro: no
  artifact-caching:
    "[Maven repo](https://maven.apache.org/guides/introduction/introduction-to-repositories.html)": manual version numbers
  data-in-one-place: no
  build-tools: Maven

- name: "[Meson](http://maven.apache.org/)"
  syntax: "[Meson](https://github.com/mesonbuild/meson/wiki/Syntax)"
  users: Projecs using Meson build system
  full-distro: no
  artifact-caching: no
  data-in-one-place: no
  versioned: no
  build-tools: Meson

- name: "[Nix expressions](https://nixos.org/nix/manual/#chap-writing-nix-expressions)"
  images:
    - topics/images/comparison/nix-cpython3-top.png
  syntax: "[Nix Expression Language](https://nixos.org/nix/manual/#ch-expression-language)"
  schemas:
    - https://nixos.org/nix/manual/#ch-expression-language
  declarative: yes
  users: NixOS, at least some commercial derivatives
  examples:
    cpython: "[pkgs/development/interpreters/python/3.4/default.nix](https://github.com/NixOS/nixpkgs/tree/master/pkgs/development/interpreters/python/3.4/default.nix)"
  full-distro: yes
  branch-whole-system: yes
  artifact-caching:
    "Nix [Binary Cache](https://nixos.org/wiki/Binary_Cache)": hash of build inputs
  incremental-builds: no
  data-in-one-place: yes   # https://github.com/NixOS/nixpkgs/
  # version marker is lib/minver.nix
  versioned: yes, no automated migrations
  build-tools: Nix

- name: "Portage [ebuild](https://wiki.gentoo.org/wiki/Ebuild)"
  images:
    - topics/images/comparison/portage-gentoo-cpython3-top.png
  syntax: Shell subset
  data-model: https://wiki.gentoo.org/wiki/Project:Package_Manager_Specification
  declarative: yes (metadata)
  procedural: yes
  users: Gentoo, Chrome OS, CoreOS, other Gentoo derivatives, Exherbo (kind of)
  examples:
    cpython:
        - "[Gentoo dev-lang/python/python-3.4.3.ebuild](https://gitweb.gentoo.org/repo/gentoo.git/tree/dev-lang/python/python-3.4.3-r7.ebuild)"
  full-distro: yes
  branch-whole-system: yes (ish)
  editing-tools:
    - "[Gentoolkit](https://wiki.gentoo.org/wiki/Gentoolkit)"
    - "[Q Applets](https://wiki.gentoo.org/wiki/Q_applets)"
  incremental-builds: \?
  data-in-one-place: yes   # https://gitweb.gentoo.org/repo/gentoo.git
  # EAPI standard versioned
  versioned: yes, no automated migrations
  build-tools: Portage, others?

- name: "[Ports-style](https://en.wikipedia.org/wiki/Ports_collection)"
  images:
    - topics/images/comparison/pkgbuild-arch-cpython3-middle.png
  syntax: Shell
  data-model:
    PKGBUILD: https://www.archlinux.org/pacman/PKGBUILD.5.html
  declarative: yes (metadata)
  procedural: yes
  documentation:
    - https://wiki.archlinux.org/index.php/Arch_Packaging_Standards
  users:
    - Alpine Linux, Arch Linux & derivatives, FreeBSD ports, OpenBSD ports,
      pkgsrc (NetBSD ports), CRUX, Void Linux, ...
  examples:
    cpython:
      - "[Arch PKGBUILD](https://projects.archlinux.org/svntogit/packages.git/tree/trunk/PKGBUILD?h=packages/python)"
      - "[Arch packages/extra/x86_64/python info](https://www.archlinux.org/packages/extra/x86_64/python/)"
  machine-readable:
    Partly. You can load the shell script and, if it follows PKGBUILD
    guidelines, extract everything. You would need to parse the script
    to get build, configure and packaging commands.
  full-distro: yes
  branch-whole-system: depends on layout
  artifact-caching: no
  incremental-builds: \?
  data-in-one-place: yes   # https://projects.archlinux.org/svntogit/packages.git/tree/trunk/PKGBUILD?h=packages/python
  versioned: no

- name: "[RPM](http://rpm.org/) .spec files"
  images:
    - topics/images/comparison/rpmbuild-fedora-cpython3-top.png
    - topics/images/comparison/rpmbuild-fedora-cpython3-package-info.png
    - topics/images/comparison/rpmbuild-fedora-cpython3-build-script.png
    - topics/images/comparison/rpmbuild-fedora-cpython3-package-rules.png
    - topics/images/comparison/rpmbuild-fedora-cpython3-changelog.png
  syntax: "[RPM spec syntax](https://docs.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/RPM_Guide/ch-specfile-syntax.html)"
  users: CentOS, Fedora, Red Hat, Meego, SuSE, commercial derivates
  declarative: yes (metadata)
  procedural: yes
  examples:
    cpython:
      - "[Fedora python.spec](http://pkgs.fedoraproject.org/cgit/python3.git/tree/python3.spec)"
      - "[SuSE python/python-base.spec](https://build.opensuse.org/package/view_file/openSUSE:Factory/python3/python3-base.spec?expand=1) ([openSUSE:Factory/python package info](https://build.opensuse.org/package/show/openSUSE:Factory/python)"
  full-distro: yes
  branch-whole-system: no
  artifact-caching:
    "[rpm packages](http://rpm.org/)": manual version numbers
    "[rpm-ostree](https://github.com/projectatomic/rpm-ostree)": hash of contents
  build-tools:
    "[koji](https://fedorahosted.org/koji/)": Automated builder tool with web frontend.
    "[Open Build Service](http://openbuildservice.org/)": |
      Open Build service, Runs at <https://build.opensuse.org/> and other places.
    "[rpmbuild](http://www.rpm.org/max-rpm-snapshot/rpmbuild.8.html)": Default tool
  cross-compile: yes
  incremental-builds: yes
  data-in-one-place: no
  versioned: no (but never changes!)
  build-tools: rpmbuild

- name: "[upkg](http://www.paldo.org/wiki/Development#English)"
  images:
    - topics/images/comparison/upkg-paldo-cpython3.png
  syntax: XML
  declarative: yes
  users: "[Paldo operating system](http://www.paldo.org/wiki/Development#English)"
  examples:
    cpython: "[Python.xml](http://paldo.org/paldo/unstable/specs/Python3.xml)"
  full-distro:
    - "[Paldo operating system](http://www.paldo.org/wiki/Development#English)"
  branch-whole-system: yes
  artifact-caching:
    upkg packages: manual version numbers
  data-in-one-place: yes
  versioned: no

- name: "[xdg-app](https://github.com/alexlarsson/xdg-app) builder"
  syntax: JSON
  users: Sandboxed GNOME applications
  declarative: yes
  documentation:
    Introduction: https://blogs.gnome.org/alexl/2015/12/17/xdg-app-christmas-update/
  full-distro: no
  artifact-caching:
    "[ostree](https://wiki.gnome.org/Projects/OSTree) repo": hash of contents
  versioned: no
  build-tools: xdg-app-builder

- name: "[ypkg](https://github.com/solus-project/ypkg) and [eopkg](https://github.com/solus-project/package-management)"
  images:
    - topics/images/comparison/ypkg-solusos-cpython3.png
  syntax: XML or YAML
  data-model: "[https://solus-project.github.io/ypkg-docs/packageyml_format/README.html](package.yml)"
  users: SolusOS, and ancestors (PiSi Linux, Pardus Linux)
  examples:
    cpython: "[python3/package.yml](https://git.solus-project.com/packages/python3/tree/package.yml)"
  full-distro:
     - yes
  branch-whole-system: yes
  artifact-caching:
    "[eopkg packages](https://wiki.solus-project.com/Packaging)": manual version numbers
  incremental-builds: \?
  reproducible-builds: \?
  data-in-one-place: no
  versioned: no
