# Sam's tracker talk for GUADEC 2015

# Goals
# - everyone understands Tracker
# - everyone who understands Tracker from a few
#   years ago knows what is new
# - I can have lots of info for all the music on
#   my computer 
# - and all of the junk there in general
# - plan of action that is achievable

Tracker: introduction and reflection

# 35 mins, 5 min qs, 5 mins walking.

1. < 15 mins

-- [bg-copenhagen-river.jpg] [fill]

Tracker: introduction and reflection

# Hi, I'm Sam.
#
# I'm not a core Tracker developer,
# but I have been involved with it on the
# sidelines for several years, and have fixed some
# bugs and testcases.

# The goal of this talk is basically to focus on
# what Tracker is and what its place in GNOME
# should be. Sounds easy? Well, there's a lot *of*
# Tracker, things it can do well but doesn't,
# things it can't do well but does anyway, etc.

# I have a lot of stuff to get through. (How many
# people are familiar with what Tracker does? How
# many people have no idea why it exists or what
# use they might have for it?)

# OK. Well Tracker describes itself in a few ways.
# On <https://wiki.gnome.org/Projects/Tracker>
# it's called a "search engine, search tool and
# metadata storage system."
#
# I prefer to think of the vision of the "database
# filesystem".

---
The "database filesystem"

# That's quite an old term now so maybe it's not
# useful for me to use it. It's
# at least 20 years old: Microsoft were looking at
# "Cairo" (later "WinFS") since 1995.[1]
#
# 1: https://en.wikipedia.org/wiki/WinFS

--- [bg-tree.jpg] [fill]
路 Store arbitrary metadata
路 Multiple ways of organising files
路 Fast searching
路 Advanced queries

# The UNIX filesystem is clearly a great design,
# we've been using it since the early 1970s (older
# than some of us here) and it still holds up well.

# These are all things you can't do with the
# filesystems POSIX provides, without extra code.

# A "database filesystem" can extend rather than
# replace what we have now. Given how fundamental
# a filesystem is to all our programs, it has to!
# Tracker currently works by sitting above the
# filesystem.

# This is how I became interested in Tracker: my
# computer is full of shit and I don't really want
# to tidy it up. Writing software is a lot more
# interesting.
#
# In particular, I've never been happy with
# existing music player software. I've always
# wanted to track much more data about the songs
# than can be expressed using ID3 tags. It seemed
# like Tracker's file system crawler and metadata
# store would be a good storage backend for such a
# music player.

--- [winfs_ntfs.png] [fit]

#"The general consensus from developers and
#reviewers was that WinFS was unusable due to
#excessive memory requirements, unfriendly and
#under-documented developer API's, and no clear
#indication on how it was actually going to improve
#the day-to-day Windows user experience. In August
#2004, Microsoft announced that WinFS would not
#ship with "Longhorn"."

#http://www.ntfs.com/winfs_availability.htm

# Notably, nobody has actually really achieved
# this yet. Tracker is really at the forefront.
# (Anyone know of anything)? I once had a guy try
# to tell me that Tracker didn't actually exist.

---

How Tracker works
(2015 edition)

-- [tracker-overview_001.png] [fit]

# Tracker has been in development for a while:
# first commit in tracker.git is 10 years ago,
# from Jamie McCracken. Most active between 2009
# and 2012, which roughly coincides with Nokia
# sponsorship. But development is continuing, cool
# improvements have been landing every so often
# right up to this year. (Anyone there who has
# patches in Tracker?)

# It's not just a GNOME project. I'll go into "who
# uses Tracker" later on, but note that (partly
# due to the huge Nokia contributions) it's well
# suited to embedded and is still used there too.
# Tracker is (too) configurable to suit multiple
# domains.

-------

'<tt>tracker</tt>' binary

# This is new in 1.4.0, if you run an old distro
# you'll have older `tracker-control`,
# `tracker-sparql`, etc. The new tool is *much*
# nicer than before.
#
# (DEMO!)
# Show status:
#   tracker daemon
#   tracker status
#
# Query all info for a file:
#   tracker info ~/Music/..
#
# Search:
#   tracker search monkey
#
# Tag:
#   tracker tag --list
#   tracker tag ~ --add home
#   tracker tag --list home
#
# SPARQL / SQL: (tracker sparql / sql)
#
# Destroy all your data: (tracker reset)

# 7,200 significant lines of C.

-------

<tt>tracker-store</tt>

# Database. Thin wrapper over SQLite. SQLite is
# widely used, sustainable. Releases sometimes
# buggy (3 stable releases are blacklisted in
# Tracker's ./configure due to bugs that break
# Tracker in some way).

# ~6,000 significant lines of Vala, 16,000 significant lines of C.

# 'Triple store' -- more flexible way of storing
# data than SQL -- can store arbitrary graphs
# rather than predefined tables.

# The tracker-store is actually a really good
# triple store, although limited in some ways.

# Comparable to: OpenLink Virtuoso: enourmous,
# "enterprise-scale". Horrible to work with. KDE
# abandoned it. Also Neo4j (Java), 4store (new,
# promising).

-------

Nepomuk

<small><i>
"Networked Environment
for Personalized,
Ontology-based Management
of Unified Knowledge"
</i></small>

# Anything with "networked" and "environment" in
# its name must be doomed to failure...

# If tracker-store stores arbitrary graphs. If
# you're familiar with relational databases but
# not RDF, you might be thinking "how do you know
# what any of the data means if you don't have a
# schema?"

# NEPOMUK provides the database schemas.

# (Who knows about RDF?) I haven't gone into RDF
# at all yet and I'm not going to go far, for
# the same reason I'm not going to explain
# x86 machine code or the GNU C library.
#
# If searching for help on RDF you can get really
# tangled in formal specifications and academic
# papers. The concepts are actually quite simple.

# Just like you wouldn't read the HTML spec in
# order to make your first website, don't try to
# read the RDF specs first, find a tutorial.

# NEPOMUK developed a bunch of ways of talking
# about desktop data, "ontologies". Ontology means
# the same as "schema" in this context.
#
# As far as I know Nepomuk is now only used by
# Tracker. KDE used it for a while.
#
### Show off the Nepomuk ontologies?

-------

D-Bus

<tt>org.freedesktop.Tracker1</tt>

# tracker-store is a central daemon, communicate
# with it over D-Bus.
#
# SQLite sucks for concurrent processes writing,
# hence central daemon approach.

-------

<tt>libtracker-sparql</tt>

# Library wrapping D-Bus interface, plus an
# in-process "read" interface.
#
# You can insert data and query data using SPARQL.

-------

<tt>tracker-extract</tt> and <tt>tracker-miner-fs</tt>

# You can write metadata direct to tracker-store,
# but most programs don't. Most can't, e.g.
# tag an MP3 on your phone, copy in to PC.

### Demo tracker-extract ?
#
# tracker-extract extracts embedded metadata from
# a file, and converts it to NEPOMUK format. It
# outputs a SPARQL query that you can run to
# insert data in the store.

# tracker-extract: ~18K significant lines of C

# tracker-miner-fs is I think most complex
# component. Also most controversial.
#
# Its job is to crawl all trees that need
# indexing, and monitor for changes. Runs as a
# background process triggered by filesystem
# events -- recipe for trouble. But also necessary
# for Tracker to be at all useful.
#
# tracker-miner-fs: ~20K significant lines of C.

-------

gnome-online-miners

# A separate repo of miners to mirror data from
# online accounts.

# - DLNA (media servers, e.g. Rygel, or commercial devices;
#         mines photos only right now)
# - Facebook (photos)
# - Flickr (photos)
# - Google (documents from Google Documents/Drive, photos from
#           Picasa/Google Photos)
# - ownCloud (documents)
# - zpj (Microsoft Windows Live / Skydrive, mines
#        accounts (contacts?), and documents)

# Great!

# Although C programs querying online resources
# and generating SPARQL are hard to follow.

# ~4.5K significant lines of C

-- [tracker-overview_001.png] [fit]

------

How can I use Tracker?

------- [app-tracker-search-tool.png] [fit]

Tracker Search Tool
(<tt>tracker-needle</tt>)

------- [app-gnome-documents.png] [fit]

Gnome Documents

------- [app-gnome-music-empty.png] [fit]

Gnome Music

------- [app-gnome-photos.png] [fit]

Gnome Photos

------- [app-nautilus.png] [fit]

Nautilus

# GtkFileChooser as well now, I hear...

------- [app-grilo-test-ui.png] [fit]

Grilo

# This is an API, not an application -- some
# apps don't write SPARQL queries directly but
# instead use the Grilo abstraction layer.

-- [tracker-overview.png] [fit]

------- [jolla-crap.jpg] [fit]

# Outside GNOME

Jolla

# Anyone still have an N9 ?

------- [bg-golden-snub-nosed-monkey.jpg]

Others ... ?
# set top boxes, IVI... ?

# light-media-scanner might well have done a better job.

-------

Pros and cons of the
current Tracker code

# 2. 10 mins

--- [bg-monkey.jpg]

<i>pro</i>: Integrates with
existing filesystem

# You don't have to give up anything in order to
# benefit from Tracker.

--- [bg-monkey.jpg]

<i>pro</i>: Well-specified interfaces
between each component

# I.E. Small C and D-Bus API

# RDF and SPARQL have a big crew of W3C people
# looking after them, and
# have long, detailed standards. Lots of work
# already done.

--- [bg-monkey.jpg]

<i>pro</i>: Based on SQLite3

--- [bg-monkey.jpg]

<i>pro</i>: Years of
integration and testing
# e.g. tracker-prefs tool

----- [bg-monkey-evil.jpg]

<i>con</i>: Inefficient ... ?

# Tracker 0.14 and older contained some nasty bugs
# that could cause it to enter a busyloop. If you
# saw tracker-miner-fs chewing 100% until you
# killed it, you hit that bug -- sorry!

# It's still possible to create a configuration
# that will slow down your computer sometimes --
# enable indexing of removable devices and plug in
# removable hard disk with 100K files, for
# example. Or clone linux.git 10 times in
# ~/Downloads.

# One big issue remains: Linux doesn't provide an
# interface for notifying on filesystem changes
# /recursively/. So we abuse 'inotify' to achieve
# that.
#
# http://www.lanedo.com/filesystem-monitoring-linux-kernel/
#
----- [bg-monkey-evil.jpg]

<i>con</i>: Misuse of 'inotify' API

----- [bg-monkey-evil.jpg]

<i>con</i>: Code is complex
(especially <tt>tracker-miner-fs</tt>)

# miner-fs is *really* asynchronous. Super hard to
# reason about... this is why the 'Tracker eats
# all my CPU bugs' survived for so long!

# Asynchronous GLib code is *beyond* spaghetti
# code, and outside into total abstract 4
# dimensional space code..

# I'd love to delete some of it. But it's all
# intertwined!

----- [bg-monkey-evil.jpg]

<i>con</i>: NEPOMUK is not
widely used in
Linked Data world

# Since KDE abandoned NEPOMUK, it doesn't really
# get used anywhere except Tracker!

----- [bg-monkey-evil.jpg]

<i>con</i>: Changes to ontologies
can destroy data

# Not a bug, but a limitation: there are some
# changes that Tracker will refuse to do, and
# maintainers will not allow in tracker.git.

# For example, if a property moves from
# multi-value to single-value... just don't do
# that, you'll lose data.
#
# This is because ontologies are mapped directly
# to Sqlite database schemas. Each propery in an
# ontology becomes a table in the database.
#
# This is probably the only way to
# implement a graph store on top of an SQL
# database: the database needs to know the
# schema in order to manage indices.

### You could use sqlitebrowser to show this.
#
# The rason for having our own graph store was
# that all existing ones (only Virtuoso, at the
# time?) were huge monsters.

# Recently a graph store called 4store was
# released as Free Software, this is worth
# investigating as it seems quite
# lightweight and simple.
#

----- [bg-monkey-evil.jpg]

<i>con</i>: All information is
stored in a file hidden
in <tt>$XDG_CACHE_DIR</tt>

# Easy to delete by accident. Even a command to do
# it! (`tracker reset`)).

# Whether this matters depends on whether the
# Tracker database is considered a 'cache' or a
# 'store'. I'll talk about that later.

----- [bg-monkey-evil.jpg]

<i>con</i>: watching for changes
using <tt>GraphUpdated</tt>
signal is awkward

# QSparql did solve this, and it'd be possible for
# us to as well. But it's hard: the API Tracker
# exposes is horrid.

--

Future

# 3. 5 mins

--- [bg-boarded-up.jpg]

Give up and start again?

# It's almost always a bad idea to rewrite
# something from scratch.

--- [baloo-wiki.png] [fit]

Baloo

# Much better than throwing it away would be to
# cooperate with other people.

# Key idea in Baloo is to avoid RDF.

# Concept of "Semantic desktop" remains.

# RDF: really abstract way of thinking about data.
# Can be slow and difficult to use.

# KDE used an existing RDF store 'Virtuoso' (with,
# of course, an abstraction layer named
# 'Soprano').

# tracker-store is much more optimised
# for desktop use case.

# Avoiding RDF storage doesn't mean you can't
# still *interchange* data as RDF!

# Having type-specific providers for indexing
# and storage means you can optimise for each
# case, e.g. Xapian for text search (where we use
# sqlite-fts).

# Downside is potentially less
# flexibility when handling new 'entities', but
# that happens rarely!

# Baloo is now in 'production' since KDE 4.13 --
# need to learn from it.

# I found lots of blogs
# and comments from people who hate it and
# want to disable it, so if you have
# a religious opposition to Tracker, you'll no
# doubt hate Baloo just as much.
#
#   (e.g. http://askubuntu.com/questions/437635/how-to-turn-off-baloo-in-kde-4-13
#         http://xmodulo.com/kde-semantic-desktop-nepomuk-baloo.html#comments)

------- [bg-blueprint.jpg]

Define the scope!

------- [bg-blueprint.jpg]

路 Indexing local content?
#    - tracker-extract and tracker-miner-fs are really good at this
#      *years* of work gone into it
# debatable whether running queries across all
# types of content is that useful...
# the gnome-shell 'federated search providers'
# approach might be better?
#
#    - does anyone *actually* want to run SPARQL queries across *all* their
#      metadata? If so, can we use federated SPARQL queries?
# I struggle to think of many actual examples of
# advanced queries...

路 Storing local content?
# No!
# Compare with Elasticsearch: it is
# NOT a primary datastore, and CAN go wrong.
# Doesn't mean we need to keep mining everything
# For apps like contacts, todo etc. you could store data in a dumb text file
# somewhere (like MBOX files), and also insert it in Tracker yourself. Use
# Tracker as an *index*.

路 Indexing removable media?
#    - good at this too, but disabled by default because eager scanning
#      of a huge HD is a waste of resources.

路 Indexing remote content?

路 Mirroring remote content?
#    - playlists from YouTube / Spotify / ...
#    - email... ?
#*Not* caching -- that's an implementation detail
#Mirroring -- yes. Should be opt-in, probably in
#gnome-online-accounts. Tracker will only be *part* of a mirroring
#solution in most cases!
#tracker-mirroring-tool, gnome-online-mirror-tool, ... ?

路 A general RDF store?
#    - tracker-store is a good implementation for some cases
#    - it might make more sense to move to a different store in future
#      and turn RDF and SPARQL into a presentation layer only. But no
#      urgent need for that.

------- [bg-blueprint.jpg]

路 Indexing local content

路 <span strikethrough="true">Storing local content</span>

路 Indexing removable media?

路 Indexing remote content?

路 <span strikethrough="true">Mirroring remote content</span>

路 <span strikethrough="true">A general RDF store</span>

---- [tracker-plan.png] [fit]

Consolidate and Simplify

------- [3-abstraction-layers.png] [fit]

# tracker-enumerator, tracker-decorator, Grilo

-----------------

Small plans!

# nobody is funded full time on Tracker!

# https://tecnocode.co.uk/2015/07/28/gtk-doc-knows-your-package-version/
# https://tecnocode.co.uk/2015/06/27/gnome-common-deprecation-round-2/

-------

Fix usage of recursive inotify

--- [bg-monkey.jpg]

Align with:

路 4store

路 Baloo

路 Elasticsearch

# 路 Split out tracker-store from tracker.git
# libmediaart happened already
# more stuff from libtracker-common could split out

#路 Test 4store triple store

#路 Investigate alterative query interfaces (see Elasticsearch)
# Elasticsearch can do lots of what Tracker can do,
# using a JSON APO
#
# Maybe could even provide a compatible (REST) API, and use
# Python 'elasticsearch' and 'elasticsearch_dsl' modules to
# access it.

#路 Look at shrinking gnome-online-miners (use TrackerEnumerator?
#  Use Grilo?)

--- [bg-monkey.jpg]

路 Turn functional-tests into installed-tests

路 No need for docs/version.xml any more

路 No need for gnome-common any more

--- [bg-monkey.jpg]

路 Create view widgets that live-update
  based on a query from the database

路 Opt-in scanning of removable devices
#- Felipe Borges GSOC project
#
路 Bring plugins (Evo, Thunderbird) up to date

路 Improve the documentation at
  http://wiki.gnome.org/Projects/Tracker

--- [bg-copenhagen-river.jpg] [fill]

<b>Website</b>: https://wiki.gnome.org/Projects/Tracker
<b>IRC</b>: irc.gnome.org #tracker
<b>Mailing list</b>: tracker-list@lists.gnome.org

#### Do your todo items address your CONS ?
#
#
