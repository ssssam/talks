dnl This file is processed with GNU m4 to produce the final talk.pinpoint file.
dnl The only m4 feature actually used is include().
changequote()
dnl
# https://fosdem.org/2016/schedule/event/format_for_build_and_integration_instructions/

# bg-1.jpg: http://www.manchestereveningnews.co.uk/news/local-news/image-reddish-vale-country-park-6495444
# bg-rocks.jpg: https://en.wikipedia.org/wiki/File:Vasquez_Rocks_County_Park.jpg
# bg-petrify.jpg: https://www.flickr.com/photos/lorix/3575618833
# bg-boots.jpg: https://en.wikipedia.org/wiki/File:Tanker_boots.jpg
#
# structured-food.jpg: https://en.wikipedia.org/wiki/File:Supermarkt.jpg
# migrations.png: https://en.wikipedia.org/wiki/File:Sort_sol_pdfnet.jpg

# TODO:
#
#  - highlight the relevant bits of the definitions that you're talking about,
#    in the slides!
#  - redo some of them in Vim
#  - remove title bars from screenshots!
#  - set up browser

[font=Cantarell 50px]
---- [bg-1.jpg]

The story of a
declarative &amp;
structured
format for
build + integration
instructions

# Welcome to my title with a really long talk.

# I'd prefer to give one that shows off cool
# things you can do with structured build
# instructions: automation, and visualation
# tools.

# I don't know of many though.

# So instead I want to convince everyone to use
# structured data.

--- [topics/images/structured-food.jpg]

Structured

--- [topics/images/food_waste.jpg]

Unstructured

# I've been involved in the development of
# a structured build language; part of project
# named Baserock. Imaginatively, that language
# is called the "Baserock definitions format."

# We learned a lot of lessons the hard way
# & I want to save everyone else the trouble!

# I try to sum up Baserock a lot, but it's not
# easy to summarise!

---- Intro [topics/images/baserock-manifesto.png]

# Here's my attempt to capture some goals and
# decisions from early on!

# Notice the "simple" goal: that is the main
# justification for Baserock n-i-h, instead of
# us trying to work in existing projects.

# Note the "no packaging": runtime package
# management is not needed for some class of OS.

# Goal of JSON build instructions (not something
# that can be retrofitted to an existing distro):
# this is what makes me interested in it (I guess)

--- [topics/images/baserock-components.png]

# Graph of the build process.
#
# Misses off the build instructions, and the
# format of the build instructions! For a long
# time we treated them as an implementation detail
# of the build tool :(
#
# Development also involves reference systems and
# a source mirroring tool.
#
include(topics/baserock-trove.pinpoint)

--- [topics/images/baserock-slab.jpg]

Native compilation

include(topics/baserock-definitions-evolution.pinpoint)

######################
#
#    Current state
#
######################

# Here's where the story ends

--- [topics/images/bg-rocks.jpg]

Some features

· Splitting artifacts (runtime/devel)
· Versions &amp; migration
· Integration hooks
· Some real systems
    [GENIVI, GNOME, OpenStack]

# And it's all declarative!

--- [topics/images/bg-rocks.jpg]

Some missing features

· Cross compilation
· Incremental builds
· Variants

# in reference systems: security updates
#
---

include(topics/variants.pinpoint)

---

Benefits of structured data

include(topics/exporting.pinpoint)

# Importing: also a big topic, but this is much
# easier and many distros have an answer (from
# e.g. PyPI, RubyGems, CPAN, ...).

---

Visualation

--- [topics/images/debian-packages-browser.png]

packages.debian.org
#    - ~4K lines of Perl

--- [topics/images/debian-package-tracker.png]

# Cool info connected to the package.

# Fedora & SuSE have similar things, probably
# other distros too!

---

Example: hyperlinked definitions

# Some other cheapass things:
#   - the rdflib-web browser
#   - the d3 circle-packing

---

# Demo the rdflib-web browser, too

Automation

· Migrating between formats
· Updating refs

--- [topics/images/bg-rocks.jpg]

# Ladies & gentlemen: use structured data
# for build+integration instructions. Not code.
#
# Best practices / the 7 commandments

Keep all data in one place
Use YAML
Write multiple tools
Version the format
Specify the syntax/structure
Specify the data model
Keep track of variance

# Hopefully next time I give a talk it will be
# about all the cool automation & visualisation
# tools we've made since then!

# Finally, I'm going to compare existing languages
# for build and integration instructions against
# the lessons we learned from messing up the Baserock definitions format!
#
# please take this with a pinch of salt...
# of course not all distros are equal. FWIW
# I run Fedora, which has a pretty bad format!
# The aim is to inform not to criticise! ..

include(comparison.generated.pinpoint)

--- [bg-1.jpg] [fill]

Baserock definitions format
<span color="lightyellow"><u>http://wiki.baserock.org/definitions</u></span>

Slides:
<span color="lightyellow"><u>https://github.com/ssssam/talks</u></span>

<span color="orange">Sam Thursfield
<u>ssssam@gmail.com</u></span>
